@model AdministrationPortal.ViewModels.MessageTypes.CreateMessageTypeViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "createForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>MessageType</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="parameters" data-max=@Model.MAX_PARAMETERS>
            <div class="form-group multiple-form-group">
                <label class="control-label col-md-2">Parameter</label>
                <div class="col-md-10">
                    <div class="input-group">

                        <div class="input-group-addon input-group-select">
                            @Html.DropDownListFor(model => model.ParameterType, Model.SupportedParameterTypes, htmlAttributes: new { @name = "type[]", @role = "menu" })
                        </div>

                        @for (var i = Model.ParameterName.Count; ;)
                        {
                            Model.ParameterName.Add("");
                            @Html.EditorFor(model => model.ParameterName[i], new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "parameter name" } })
                            @Html.ValidationMessageFor(model => model.ParameterName[i], "", new { @class = "text-danger" })
                            break;
                        }
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-success btn-add">+</button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" id="submitButton" />
            </div>
        </div>
    </div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {

            var addFormGroup = function (event) {
                event.preventDefault();

                var $formGroup = $(this).closest('.form-group');
                var $multipleFormGroup = $formGroup.closest('.multiple-form-group');
                var $formGroupClone = $formGroup.clone();

                $(this)
                    .toggleClass('btn-success btn-add btn-danger btn-remove')
                    .html('–');

                $formGroupClone.find('input').val('');
                $formGroupClone.find('label').text('');
                $formGroupClone.insertAfter($formGroup);

                var $lastFormGroup = $multipleFormGroup.siblings('.form-group:last').andSelf();
                if ($multipleFormGroup.parent('.parameters').data('max') <= countFormGroup($multipleFormGroup)) {
                    $lastFormGroup.find('.btn-add').attr('disabled', true);
                }
            };

            var removeFormGroup = function (event) {
                event.preventDefault();

                var $formGroup = $(this).closest('.form-group');
                var $multipleFormGroup = $formGroup.closest('.multiple-form-group');

                var $lastFormGroup = $multipleFormGroup.siblings().addBack().filter('.form-group:last');
                if ($multipleFormGroup.parent('.parameters').data('max') >= countFormGroup($multipleFormGroup)) {
                    $lastFormGroup.find('.btn-add').attr('disabled', false);
                }

                var $firstFormGroup = $multipleFormGroup.siblings().addBack().filter('.form-group:first');
                if ($firstFormGroup.length == $formGroup.length && $firstFormGroup.length == $firstFormGroup.filter($formGroup).length) {
                    var thisText = $formGroup.find('label').text();
                    $formGroup.next().find('label').text(thisText);
                }

                $formGroup.remove();
            };

            var countFormGroup = function ($form) {
                return $form.siblings('.form-group').addBack().length;
            };

            $(document).on('click', '.btn-add', addFormGroup);
            $(document).on('click', '.btn-remove', removeFormGroup);
        });
    </script>
}
