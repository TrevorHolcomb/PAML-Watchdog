@using AdministrationPortal.Helpers
@model AdministrationPortal.ViewModels.Rules.RuleEditViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Rule</h4>
        <hr/>
        @Html.HiddenFor(model => model.Id)

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, "Rule Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Description -->
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Rule Creator -->
        <div class="form-group">
            @Html.LabelFor(model => model.RuleCreator, "Created by", htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.RuleCreator, new {htmlAttributes = new {@class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.RuleCreator, "", new {@class = "text-danger"})
            </div>
        </div>

        <!-- Engine -->
        <div class="form-group">
            @Html.LabelFor(model => model.Engine, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Engine, Model.RuleOptions.EngineList, new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.Engine, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Origin -->
        <div class="form-group">
            @Html.LabelFor(model => model.Origin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Origin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Origin, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Server -->
        <div class="form-group">
            @Html.LabelFor(model => model.Server, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Server, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Server, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Expression -->
        <div class="form-group hidden">
            @Html.LabelFor(model => model.Expression, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Expression, new {htmlAttributes = new {@class = "form-control", @id = "Expression"}})
                @Html.ValidationMessageFor(model => model.Expression, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Expression, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div id="builder"></div>
            </div>
        </div>

        <!-- Default Severity -->
        <div class="form-group">
            @Html.LabelFor(model => model.DefaultSeverity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.DefaultSeverity, Model.RuleOptions.DefaultSeverityList, new { @class = "form-control", style = "width:4em;" })
                @Html.ValidationMessageFor(model => model.DefaultSeverity, "", new { @class = "text-danger" })
            </div>
        </div>

        <!--BEGIN MULTIPLE NOTES-->
        <div class="form-group">
            <div class="control-label col-md-2">
                @Html.Label("", "Current Default Notes", htmlAttributes: new { @class = "label-defaultNotes" })
            </div>
            <div class="col-md-10">
                @for (var p = 0; p < Model.DefaultNotes.Count; p++)
                {
                    var style = (Model.SelectedNotesEnabled[p]) ? "" : "display:none";
                    <div class="current-form-group" style="margin-bottom: 10px" >
                        <div class="input-group">
                            @Html.HiddenFor(model => model.DefaultNotes[p].Id, htmlAttributes: new { @class = "parameter-enabled" })
                            @Html.EditorFor(model => model.DefaultNotes[p].Text, new { htmlAttributes = new { @class = "current-text form-control",@readonly="readonly" } })
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-default btn-edit-note"><span class="glyphicon glyphicon-pencil"></span></button>
                                <button type="button" class="btn btn-danger btn-remove-current">X</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">
                @Html.Label("", "Select New Default Notes", htmlAttributes: new { @class = "label-defaultNotes" })
            </div>
            <div class="selectedNotes col-md-10" data-max=@Model.MAX_DEFAULTNOTES>
                @for (var p = 0; p < Model.MAX_DEFAULTNOTES; p++)
                {
                    var style = (Model.SelectedNotesEnabled[p]) ? "" : "display:none";
                    <div class="multiple-form-group-selected" style="margin-bottom: 15px; @style">
                        @Html.HiddenFor(model => model.SelectedNotesEnabled[p], htmlAttributes: new { @class = "parameter-enabled" })
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.SelectedNoteIds[p], Model.RuleOptions.DefaultNotes, htmlAttributes: new { @class = "selectNoteText form-control" })

                            <span class="input-group-btn">
                                <button type="button" class="btn btn-danger btn-remove-selected">-</button>
                            </span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">
                @Html.Label("", "Add New Default Notes", htmlAttributes: new { @class = "label-defaultNotes" })
            </div>
            <div class="addedNotes col-md-10" data-max=@Model.MAX_DEFAULTNOTES>
                @for (var p = 0; p < Model.MAX_DEFAULTNOTES; p++)
                {
                    var style = (Model.NewNotesEnabled[p]) ? "" : "display:none";
                    <div class="multiple-form-group-new" style="margin-bottom: 15px; @style">
                        @Html.HiddenFor(model => model.NewNotesEnabled[p], htmlAttributes: new { @class = "parameter-enabled" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.NewDefaultNotes[p], new { htmlAttributes = new { @class = "text-box form-control", type = "text", placeholder = "Enter New Notes Here" } })
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-danger btn-remove-new">-</button>
                            </span>
                        </div>
                    </div>
                }
            </div>
        </div>
        <!--END MULTIPLE NOTES-->

        <!-- Alert Type -->
        <div class="form-group">
            @Html.LabelFor(model => model.AlertTypeId, "Alert Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.AlertTypeId, Model.RuleOptions.AlertTypes, htmlAttributes: new { @class = "form-control", disabled = true, @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.AlertTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Message Type -->
        <div class="form-group">
            @Html.LabelFor(model => model.MessageTypeName, "Message Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MessageTypeName, Model.RuleOptions.MessageTypes, htmlAttributes: new { @class = "form-control", disabled = true, @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.MessageTypeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Rule Category Ids-->
        <div class="form-group">
            @Html.Label(nameof(Model.RuleOptions) + "." + nameof(Model.RuleOptions.RuleCategories), "Rule Categories", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.MultiSelectDropDown(nameof(Model.SelectedRuleCategoryIds), Model.RuleOptions.RuleCategories, Model.SelectedRuleCategoryIds, "form-control")

                @Html.ValidationMessageFor(model => model.RuleOptions.RuleCategories, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Support Categories -->
        <div class="form-group">
            @Html.LabelFor(model => model.SupportCategoryId, "Support Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SupportCategoryId, Model.RuleOptions.SupportCategories, htmlAttributes: new { @class = "form-control", disabled = true, @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.SupportCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save Changes" class="btn btn-default" />
            </div>
        </div>
    </div>




}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @Scripts.Render("~/Scripts/query-builder.standalone.js")
    @Styles.Render("~/Styles/css/query-builder.css")
    @Scripts.Render("~/Scripts/query-builder-adapter.js")

    <script type="text/javascript">

        $(document).ready(function () {
            //$("#selectNoteText").prop("selectedIndex", -1);
            $(".selectNoteText").prepend($('<option>', { value: 0, text: 'None' }));
            $(".selectNoteText").val("0");

            //strip long note text
            var maxLength = 75;
            $('#selectNoteText > option').text(function (i, text) {
                if (text.length > maxLength) {
                    return text.substr(0, maxLength) + '...';
                }
            });

            $(document).on('click', '.btn-add-selected', addSelectedFormGroup);
            $(document).on('click', '.btn-remove-selected', removeSelectedFormGroup);
            $(document).on('click', '.btn-add-new', addNewFormGroup);
            $(document).on('click', '.btn-remove-new', removeNewFormGroup);
            $(document).on('click', '.btn-remove-current', removeCurrentNote);
            $(document).on('click', '.btn-edit-note', promptEdit);

            makeLastVisibleButtonGreenNewNotes();
            makeLastVisibleButtonGreenSelectedNotes();

            renderQueryBuilder("@Model.MessageTypeName");
            $("input[type='submit']").click(function () {
                $("input[name='Expression']").val(JSON.stringify($('#builder').queryBuilder('getRules')));
            });
        });

        // Renders the queryBuilder for the given Message Type
        function renderQueryBuilder(messageType) {
            var url = "@Url.HttpRouteUrl("DefaultApi", new {controller = "MessageTypeParameterTypeAPI"})";
            $.get(url + "/" + messageType,
            function (ret) {
                $("#builder").empty();
                $("#builder").queryBuilder('destroy');

                $('#builder').queryBuilder({
                    plugins: ['bt-tooltip-errors'],
                    filters: filtersFromParameterList(ret)
                });
            });
        }

        //Toggle last visible button for added notes
        function makeLastVisibleButtonGreenNewNotes() {
            var $lastEnabled = $('.addedNotes').find('.parameter-enabled').filter("[value='True']").last();
            var $lastButton = $lastEnabled.next('.input-group').find('.btn');
            $lastButton.removeClass('btn-danger btn-remove-new');
            $lastButton.addClass('btn-success btn-add-new').html('+');
        };

        //Toggle last visible button for selected notes
        function makeLastVisibleButtonGreenSelectedNotes() {
            var $lastEnabled = $('.selectedNotes').find('.parameter-enabled').filter("[value='True']").last();
            var $lastButton = $lastEnabled.next('.input-group').find('.btn');
            $lastButton.removeClass('btn-danger btn-remove-selected');
            $lastButton.addClass('btn-success btn-add-selected').html('+');
        };

        //add selected note group
        function addSelectedFormGroup(event) {
            event.preventDefault();

            var $multipleFormGroupSelected = $(this).closest('.multiple-form-group-selected');

            //Toggle this button state
            $(this).toggleClass('btn-success btn-add-selected btn-danger btn-remove-selected').html('–');

            //Enable the next group
            var $nextGroup = $multipleFormGroupSelected.next('.multiple-form-group-selected');
            $nextGroup.find('.parameter-enabled').attr('value', 'True');
            $nextGroup.find('.btn').toggleClass('btn-success btn-add-selected btn-danger btn-remove-selected').html('+');
            $nextGroup.fadeIn(300);

            //Always disable the last button
            var $lastFormGroup = $multipleFormGroupSelected.siblings('.multiple-form-group-selected:last');
            $lastFormGroup.find('.btn').attr('disabled', true);
            makeLastVisibleButtonGreenSelectedNotes();
        };

        //remove selected note group
        function removeSelectedFormGroup(event) {
            event.preventDefault();

            var $multipleFormGroupSelected = $(this).closest('.multiple-form-group-selected');

            //Always reenable the last button before replacing it
            var $lastFormGroup = $multipleFormGroupSelected.siblings('.multiple-form-group-selected:last');
            $lastFormGroup.find('.btn').attr('disabled', false);

            //Disable this group and move it to the bottom
            $multipleFormGroupSelected.fadeOut(300, function () {
                $multipleFormGroupSelected.find('.text-box').val('');
                $multipleFormGroupSelected.find('.parameter-enabled').attr('value', 'False');
                $multipleFormGroupSelected.insertAfter($lastFormGroup);
            });
            makeLastVisibleButtonGreenSelectedNotes();
        };

        //add new note group
        function addNewFormGroup(event) {
            event.preventDefault();

            var $multipleFormGroupNew = $(this).closest('.multiple-form-group-new');

            //Toggle this button state
            $(this).toggleClass('btn-success btn-add-new btn-danger btn-remove-new').html('–');

            //Enable the next group
            var $nextGroup = $multipleFormGroupNew.next('.multiple-form-group-new');
            $nextGroup.find('.parameter-enabled').attr('value', 'True');
            $nextGroup.find('.btn').toggleClass('btn-success btn-add-new btn-danger btn-remove-new').html('+');
            $nextGroup.fadeIn(300);

            //Always disable the last button
            var $lastFormGroup = $multipleFormGroupNew.siblings('.multiple-form-group-new:last');
            $lastFormGroup.find('.btn').attr('disabled', true);
            makeLastVisibleButtonGreenNewNotes();
        };

        //remove new note group
        function removeNewFormGroup(event) {
            event.preventDefault();

            var $multipleFormGroupNew = $(this).closest('.multiple-form-group-new');

            //Always reenable the last button before replacing it
            var $lastFormGroup = $multipleFormGroupNew.siblings('.multiple-form-group-new:last');
            $lastFormGroup.find('.btn').attr('disabled', false);

            //Disable this group and move it to the bottom
            $multipleFormGroupNew.fadeOut(300, function () {
                $multipleFormGroupNew.find('.text-box').val('');
                $multipleFormGroupNew.find('.parameter-enabled').attr('value', 'False');
                $multipleFormGroupNew.insertAfter($lastFormGroup);
            });
            makeLastVisibleButtonGreenNewNotes();
        };


        function removeCurrentNote(event) {
            event.preventDefault();

            var $currentFormGroup = $(this).closest('.current-form-group');

            $currentFormGroup.find('.current-text').val("");
            $currentFormGroup.hide();

        };

        function promptEdit(event) {
            if (confirm('Editing this note will affect all other rules which use the same note(changes made here will be seen elsewhere), are you sure you would like to do this?')) {
                var $currentFormGroup = $(this).closest('.current-form-group');
                $currentFormGroup.find('.current-text').prop("readonly", false);
            }
        };

    </script>
}