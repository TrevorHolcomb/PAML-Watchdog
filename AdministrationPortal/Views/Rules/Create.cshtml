@using AdministrationPortal.Helpers
@model AdministrationPortal.ViewModels.Rules.RuleCreateViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Rule</h4>
        <hr/>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <!-- Rule Name -->
        <div class="form-group">
            @Html.LabelFor(model => model.Name, "Rule Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Description -->
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
            </div>
        </div>

        <!-- Engine -->
        <div class="form-group">
            @Html.LabelFor(model => model.Engine, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Engine, Model.RuleOptions.EngineList, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Engine, "", new {@class = "text-danger"})
            </div>
        </div>

        <!-- Origin -->
        <div class="form-group">
            @Html.LabelFor(model => model.Origin, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Origin, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Origin, "", new {@class = "text-danger"})
            </div>
        </div>

        <!-- Server -->
        <div class="form-group">
            @Html.LabelFor(model => model.Server, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Server, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Server, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Created By -->
        <div class="form-group">
            @Html.LabelFor(model => model.RuleCreator, "Created by", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RuleCreator, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RuleCreator, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Expression -->
        <div class="form-group hidden">
            @Html.LabelFor(model => model.Expression, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Expression, new {htmlAttributes = new {@class = "form-control", @id = "Expression"}})
                @Html.ValidationMessageFor(model => model.Expression, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Expression, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div id="builder"></div>
            </div>
        </div>

        <!-- Default Severity -->
        <div class="form-group">
            @Html.LabelFor(model => model.DefaultSeverity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.DefaultSeverity, Model.RuleOptions.DefaultSeverityList, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DefaultSeverity, "", new { @class = "text-danger" })
            </div>
        </div>

        <!--NOTES HERE-->
        <div class="form-group">
            <label class = "control-label col-md-2">Default Note</label>
            <div class="col-md-10">
               <button id="selectNote" type="button" class="btn btn-default">Select Existing Note</button>
               <button id="addNote" type="button" class="btn btn-default" data-toggle="collapse" data-target="#addNotePanel">Add New Note</button>
               <label id="noteText"/>
                <p/>
            </div>
        </div>

        <!-- Note Body -->
        <div class="form-group">
            <div id="addNotePanel" class="collapse">
                @Html.LabelFor(model => model.DefaultNoteText, "Note Text", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DefaultNoteText, new { htmlAttributes = new { @class = "form-control", @id = "addNoteText" } })
                </div>
                <div class="col-md-12">
                    <button id="btnSaveNewNote" type="button" class="btn btn-success btn-default pull-right"><span class="glyphicon glyphicon-ok"></span>Save</button>
                    <button type="button" id="btnCancelAdd" class="btn btn-danger btn-default pull-right" data-toggle="collapse" data-target="#addNotePanel"><span class="glyphicon glyphicon-remove" ></span> Cancel</button>
                </div>
            </div>
        </div>

        <!-- Alert Type -->
        <div class="form-group">
            @Html.LabelFor(model => model.AlertTypeId, "Alert Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.AlertTypeId, Model.RuleOptions.AlertTypes, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AlertTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Message Type -->
        <div class="form-group">
            @Html.LabelFor(model => model.MessageTypeName, "Message Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MessageTypeName, Model.RuleOptions.MessageTypes, htmlAttributes: new { @class = "form-control", @onchange="onMessageTypeChange(this)", @id="message-type" })
                @Html.ValidationMessageFor(model => model.MessageTypeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Rule Category -->
        <div class="form-group">
            @Html.LabelFor(model => model.RuleCategoryIds, "RuleCategoryIds", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model != null)
                {
                    @Html.MultiSelectDropDown("RuleCategoryIds", Model.RuleOptions.RuleCategories, Model.RuleOptions.RuleCategories.Select(e => e.Value.AsInt()), "form-control hidden")
                }
                else
                {
                    @Html.ListBox("RuleCategoryIds", Model.RuleOptions.RuleCategories, htmlAttributes: new { @class = "form-control hidden" })
                }
                @Html.ValidationMessageFor(model => model.RuleOptions.RuleCategories, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Support Category -->
        <div class="form-group">
            @Html.LabelFor(model => model.SupportCategoryId, "Support Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SupportCategoryId, Model.RuleOptions.SupportCategories, htmlAttributes: new { @class = "form-control" } )
                @Html.ValidationMessageFor(model => model.SupportCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>


    <!--Modals for notes-->
    <div class="modal fade" id="selectNoteModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="padding:20px 50px;">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4><span class="glyphicon glyphicon-hand-up"></span> Select Note</h4>
                </div>
                <div class="modal-body" style="padding:50px 50px;">
                    <form role="form">
                        <div class="form-group">
                            <label for="note"><span class="glyphicon glyphicon-pencil"></span> Note</label>
                            @Html.DropDownListFor(model => model.DefaultNoteId, Model.RuleOptions.DefaultNotes, htmlAttributes: new { @class = "form-control", @style = "overflow:scroll;text-overflow:ellipsis;", @id="selectNoteText" })
                                
                        </div>
                        <button id="btnSelectNote" type="button" class="btn btn-success btn-default pull-right"><span class="glyphicon glyphicon-ok"></span>Select</button>
                        <button class="btn btn-danger btn-default pull-right" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/bootstrap-multiselect.js")

    @Scripts.Render("~/Scripts/query-builder.standalone.js")
    @Styles.Render("~/Styles/css/query-builder.css")
    @Scripts.Render("~/Scripts/query-builder-adapter.js")

    <script type="text/javascript">
        $(document)
            .ready(function() {
                $("#selectNoteText").prop("selectedIndex", -1);
                $("#addNotePanel").collapse({ toggle: false });
                $('#RuleCategoryIds')
                    .multiselect({
                        buttonWidth: '100%',
                        enableCaseInsensitiveFiltering: true,
                        disableIfEmpty: true
                    });
                $("#selectNote")
                    .click(function() {
                        $("#addNotePanel").collapse('hide');
                        $("#selectNoteModal").modal();
                    });
                $("#btnSelectNote")
                    .click(function() {
                        $("#selectNoteModal").modal('hide');
                        $("#noteText").text($("#selectNoteText").find("option:selected").text());
                        $("#addNoteText").val("");
                    });
                $("#btnSaveNewNote")
                    .click(function() {
                        $("#noteText").text($("#addNoteText").val());
                        $("#addNotePanel").collapse('hide');
                    });
                $("#btnCancelNewNote")
                    .click(function() {
                        $("#noteText").text("");
                        $("#addNoteText").val("");
                        $("#addNotePanel").collapse('hide');
                    });

                onMessageTypeChange($('#message-type')[0]);
                $("input[type='submit']").click(function () {
                    $("input[name='Expression']").val(JSON.stringify($('#builder').queryBuilder('getRules')));
                });
            });
        
        function onMessageTypeChange(controller) {
            renderQueryBuilder(controller.value);
        }

        function renderQueryBuilder(messageType) {
            var url = "@Url.HttpRouteUrl("DefaultApi", new {controller = "MessageTypeParameterTypeAPI"})";
            $.get(url + "/" + messageType,
            function (ret) {
                $("#builder").empty();
                $("#builder").queryBuilder('destroy');

                $('#builder').queryBuilder({
                    plugins: ['bt-tooltip-errors'],
                    filters: filtersFromParameterList(ret)
                });
            });
        }
    </script>
}